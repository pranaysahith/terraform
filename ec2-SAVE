
ami-838b53fc"


resource "aws_instance" "chefserver2" {
  ami                         = "${lookup(var.CentosLinux, var.region)}"
  instance_type               = "t2.small"
  associate_public_ip_address = "true"
  subnet_id                   = "${aws_subnet.PublicAZA.id}"
  vpc_security_group_ids      = ["${aws_security_group.FrontEnd.id}"]
  key_name                    = "${var.key_name}"
  # TODO: make this instance profile have access to private chef bucket
  iam_instance_profile        = "${aws_iam_instance_profile.ssm_profile.id}"
  tags {
        Name                  = "chefserver2"
        Environment           = "Test"
  }
  user_data                   = <<EOF
  #!/bin/bash
  yum update -y
  yum -y install jq bc git unzip
  sed -i "s/localhost.localdomain/apache/g" /etc/sysconfig/network
  myip=$(nslookup apache.erich.com | grep Address | tail -1 | cut -f2 -d ":")
  echo "$myip apache apache.erich.com" > /etc/hosts
  hostname apache

  echo "# getting rsa keys and giving them to both root and ec2-user ##############################"
  echo -ne "-$(aws ssm get-parameters --region us-east-1 --names 'id_rsa' --with-decryption --output json | jq --raw-output '.Parameters[0].Value' | sed -e $'s/,/\\n/g') " > /root/.ssh/id_rsa
  ssh-keyscan github.com >>/root/.ssh/known_hosts
  chmod 400 /root/.ssh/id_rsa
  chmod 700 /root/.ssh
  ls -lS    /root/.ssh/*
  echo -e "Host github.com           " > ~/.ssh/config
  echo -e " StrictHostKeyChecking no " >> ~/.ssh/config
  echo -e "                          " >> ~/.ssh/config
  sudo chmod 600 ~/.ssh/config
  cd /tmp
  echo "#####################  doing now the clone #####################################################################"
  git config --global user.name  'EJ Best'
  git config --global user.email 'ejbest@alumni.rutgers.edu'
  git clone git@github.com:ejbest/deployments.git
  sh /tmp/deployments/ChefMaster/ChefServerInstall_RedHat.sh
EOF
}

resource "aws_instance" "chefserver" {
  ami                         = "${lookup(var.AmiLinux, var.region)}"
  instance_type               = "t2.small"
  associate_public_ip_address = "true"
  subnet_id                   = "${aws_subnet.PublicAZA.id}"
  vpc_security_group_ids      = ["${aws_security_group.FrontEnd.id}"]
  key_name                    = "${var.key_name}"
  # TODO: make this instance profile have access to private chef bucket
  iam_instance_profile        = "${aws_iam_instance_profile.ssm_profile.id}"
  tags {
        Name                  = "chefserver"
        Environment           = "Test"
  }
  user_data                   = <<EOF
  #!/bin/bash
  yum update -y
  yum -y install jq bc git
  echo "##################### setting the hostname ####################################################################"
  sed -i "s/localhost.localdomain/chefserver/g" /etc/sysconfig/network
  myip=$(nslookup chefserver.erich.com | grep Address | tail -1 | cut -f2 -d ":")
  echo "$myip chefserver chefserver.erich.com" > /etc/hosts
  hostname chefserver
  echo "# getting rsa keys and giving them to both root and ec2-user ##############################"
  echo -ne "-$(aws ssm get-parameters --region us-east-1 --names 'id_rsa' --with-decryption --output json | jq --raw-output '.Parameters[0].Value' | sed -e $'s/,/\\\n/g')" > /root/.ssh/id_rsa
  ssh-keyscan github.com >>/root/.ssh/authorized_keys
  chmod 600 /root/.ssh/id_rsa.pub
  chmod 400 /root/.ssh/id_rsa
  chmod 700 /root/.ssh
  ls -lS    /root/.ssh/*
  echo -e "Host github.com           " > ~/.ssh/config
  echo -e " StrictHostKeyChecking no " >> ~/.ssh/config
  echo -e "                          " >> ~/.ssh/config
  sudo chmod 600 ~/.ssh/config
  echo "starting Chef Installation in folder"
  pwd
  echo "creating folder .chef"
  mkdir /home/ec2-user/.chef
  mkdir /root/.chef
  echo "making testfile"
  touch /home/ec2-user/.chef/mytestfile
  echo "User executing commands is"
  whoami
  cd /tmp
  echo "#####################  doing now the clone #####################################################################"
  sudo git config --global user.name  'EJ Best'
  sudo git config --global user.email 'ejbest@alumni.rutgers.edu'
  git clone git@github.com:ejbest/deployments.git
  sh /tmp/deployments/ChefMaster/ChefServerInstall_RedHat.sh
EOF
}







resource "aws_route53_record" "apache01" {
  zone_id                     = "ZBVO8OQHTFSNO"
  name                        = "apache01.erich.com"
  type                        = "CNAME"
  ttl                         = "60"
  records                     = ["${aws_instance.apache01.public_dns}"]
}












resource "aws_instance" "apache01" {
  ami                         = "${lookup(var.AmiLinux, var.region)}"
  instance_type               = "t2.micro"
  associate_public_ip_address = "true"
  subnet_id                   = "${aws_subnet.PublicAZA.id}"
  vpc_security_group_ids      = ["${aws_security_group.FrontEnd.id}"]
  key_name                    = "${var.key_name}"
  tags {
        Name                  = "apache01"
  }
  user_data                   = <<EOF
  #!/bin/bash
  yum update -y
  cd /tmp
  git config --global user.name "ejbest"
  git config --global user.email "ejbest@alumni.rutgers.edu"
  git config --global push.default matching
  echo -e '#!/bin/bash\nexec /usr/bin/ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa $@' > /tmp/git_ssh
  chmod +x /tmp/git_ssh
  export GIT_SSH="/tmp/git_ssh"
  git clone git@github.com:ejbest/deployments.git

  EOF
}


/*
resource "tls_private_key" "chefserver" {
  algorithm   = "rsa"
  rsa_bits    = 4096
}

resource "aws_s3_bucket" "chefserver" {
    bucket = "chef-server-test"
    # TODO: update with a more secure acl in future
    acl    = "public-read"

    tags {
      Name        = "chefserver"
      Environment = "test"
    }

    # TODO: control access by IAM permissions in future
  }

resource "aws_s3_bucket_object" "chefserver-private" {
  bucket = "${aws_s3_bucket.chefserver.id}"
  key = "chefserver.pem"
  content_base64 = "${base64encode(tls_private_key.chefserver.private_key_pem)}"
}

resource "aws_s3_bucket_object" "chefserver-public" {
  bucket = "${aws_s3_bucket.chefserver.id}"
  key = "chefserver.pub"
  content_base64 = "${base64encode(tls_private_key.chefserver.public_key_pem)}"
}
*/
